<Project>

  <Import Project="Sdk.props" Sdk="Microsoft.DotNet.Arcade.Sdk" />

  <PropertyGroup>
    <LangVersion>13.0</LangVersion>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <AnalysisLevel>9.0</AnalysisLevel>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <NoWarn>$(NoWarn);CS1591;NU5128</NoWarn>
    <WarningsNotAsErrors>NU1901;NU1902;NU1903;NU1904</WarningsNotAsErrors>
    <NuGetAuditMode>all</NuGetAuditMode>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>portable</DebugType>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <SuppressSymbolPackageFormatValidation>true</SuppressSymbolPackageFormatValidation>
    <EnableXlfLocalization>false</EnableXlfLocalization>
    <ProduceReferenceAssembly>true</ProduceReferenceAssembly>
    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>
    <CentralPackageTransitivePinningEnabled>false</CentralPackageTransitivePinningEnabled>
    <AccelerateBuildsInVisualStudio>true</AccelerateBuildsInVisualStudio>
  </PropertyGroup>

  <PropertyGroup>
    <StrongNameKeyId>OpenIddict</StrongNameKeyId>
    <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)eng\key.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <DelaySign>false</DelaySign>
    <PublicSign>false</PublicSign>
    <PublicKey>0024000004800000140200000602000000240000525341310010000001000100613f2880fc9f71b5e8f968801c1a4923e1df760bd3f9d2d752f83c01cabc4853e7f32bba18e9e88ca1285d96655008148d60c43d28d82a292c6bf0c8a761fd5d345e45ec1c044b6eeca140593779e6c9e8b59eb1b1cc905dc81e559a9fdf24c77d333c53cc8c7f2d46a6df3a74c426e4afc97bab4117a87a882552c8f41e9f4757bb40a1255cf720f85ce50bac763a6104b03d6927ef05f5dcc316450eda528eae7f003af8c6463daa9505fae121d0c8294eb927995a4dd96b9397c16a479c865322af27c0f1b493a5dc03305bd5d46ac376de620cb050b40f9fb1cbb0a2004242ad30aff30e203fb68a104eed90d80def2e04f1c73e01937d9f1359108904d13d5226ac717880f51070066252ceb0b0acdb6705fb76515f3cebb2fc497572ab3c66718fbdb1306f39125a6cb6f40006db495a21a61b5273ddcbc83e983a2e59b04ebbcde41aad46ff4292080b1ede89878ac95b26d68227cd6077994b397255e91b09d25de64f0f7cf58cd3f96460561056eaf48ff1fb1d9f6faa3741bc756b930d761dfe0bde2d8d4c79351888688dd2d0c2939b8e0619a3f668816fbbab070c3139e3f3a5b2961f7d99f2af95fde9c52958644e575a3d0f2a1de8d5fef0b8c9766b415e7566eaba2ad0c775089c1f5148008509700fcebdd001f1b36a1db83be5b2b66c18342d3230e5f995f1283335dbee7388aa3584206fba97112775af</PublicKey>
    <PublicKeyToken>35a561290d20de2f</PublicKeyToken>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(DotNetRoot)' == '' ">
    <DotNetRoot Condition=" '$(DOTNET_HOST_PATH)' != '' ">$([System.IO.Path]::GetDirectoryName($(DOTNET_HOST_PATH)))</DotNetRoot>
    <DotNetRoot Condition=" '$(MSBuildRuntimeType)' != 'Core' ">$(ProgramFiles)\dotnet</DotNetRoot>
  </PropertyGroup>

  <ItemGroup Condition=" '$(DotNetRoot)' != '' ">
    <AndroidPackFolders     Include="$(DotNetRoot)\packs\Microsoft.Android.Ref*" />
    <IOSPackFolders         Include="$(DotNetRoot)\packs\Microsoft.iOS.Ref*" />
    <MacCatalystPackFolders Include="$(DotNetRoot)\packs\Microsoft.MacCatalyst.Ref*" />
    <MacOSPackFolders       Include="$(DotNetRoot)\packs\Microsoft.macOS.Ref*" />
  </ItemGroup>

  <PropertyGroup>
    <AndroidPackPaths>@(AndroidPackFolders->'%(FullPath)')</AndroidPackPaths>
    <IOSPackPaths>@(IOSPackFolders->'%(FullPath)')</IOSPackPaths>
    <MacCatalystPackPaths>@(MacCatalystPackFolders->'%(FullPath)')</MacCatalystPackPaths>
    <MacOSPackPaths>@(MacOSPackFolders->'%(FullPath)')</MacOSPackPaths>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      Note: targeting Android, iOS, Mac Catalyst or macOS requires installing the corresponding .NET workload.
      To ensure the solution can be built on machines that don't have the appropriate workloads installed,
      the platform-specific target framework monikers are only used if the corresponding .NET pack is present.
    -->
    <SupportsAndroidTargeting
      Condition=" '$(SupportsAndroidTargeting)' == '' And
                  ($([System.OperatingSystem]::IsMacOS()) Or $([System.OperatingSystem]::IsWindows())) And
                 ('$(GITHUB_ACTIONS)' == 'true' Or '$(AndroidPackPaths)' != '') ">true</SupportsAndroidTargeting>

    <SupportsIOSTargeting
      Condition=" '$(SupportsIOSTargeting)' == '' And
                  ($([System.OperatingSystem]::IsMacOS()) Or $([System.OperatingSystem]::IsWindows())) And
                 ('$(GITHUB_ACTIONS)' == 'true' Or '$(IOSPackPaths)' != '') ">true</SupportsIOSTargeting>

    <SupportsMacCatalystTargeting
      Condition=" '$(SupportsMacCatalystTargeting)' == '' And
                  ($([System.OperatingSystem]::IsMacOS()) Or $([System.OperatingSystem]::IsWindows())) And
                 ('$(GITHUB_ACTIONS)' == 'true' Or '$(MacCatalystPackPaths)' != '') ">true</SupportsMacCatalystTargeting>

    <SupportsMacOSTargeting
      Condition=" '$(SupportsMacOSTargeting)' == '' And
                  ($([System.OperatingSystem]::IsMacOS()) Or $([System.OperatingSystem]::IsWindows())) And
                 ('$(GITHUB_ACTIONS)' == 'true' Or '$(MacOSPackPaths)' != '') ">true</SupportsMacOSTargeting>

    <!--
      Note: while <EnableWindowsTargeting>true</EnableWindowsTargeting> can be used to force targeting
      Windows on non-Windows platforms, Windows-specific targets are only used when running on Windows
      to speed up the build on non-Windows platforms.
    -->
    <SupportsWindowsTargeting
      Condition=" '$(SupportsWindowsTargeting)' == '' And $([System.OperatingSystem]::IsWindows()) ">true</SupportsWindowsTargeting>

    <!--
      Note: the .NET Core 5.0 reference assemblies or UWP contract assemblies may not be available if
      the Windows SDK is not installed (or if a different version is installed). To ensure the solution
      can be built on machines that don't have the UWP tooling installed, directory checks are used to
      ensure the reference and contract assemblies are present on the machine before targeting uap10.0.
    -->
    <SupportsUniversalWindowsPlatformTargeting
      Condition=" '$(SupportsUniversalWindowsPlatformTargeting)' == '' And $([System.OperatingSystem]::IsWindows()) And
                 ('$(GITHUB_ACTIONS)' == 'true' Or (Exists('$(MSBuildProgramFiles32)\Reference Assemblies\Microsoft\Framework\.NETCore\v5.0') And
                                                    Exists('$(MSBuildProgramFiles32)\Windows Kits\10\References\10.0.17763.0'))) ">true</SupportsUniversalWindowsPlatformTargeting>

    <NetFrameworkTargetFrameworks Condition=" '$(NetFrameworkTargetFrameworks)' == '' ">
      net462;
      net472;
      net48
    </NetFrameworkTargetFrameworks>

    <NetCoreTargetFrameworks Condition=" '$(NetCoreTargetFrameworks)' == '' ">
      net8.0;
      net9.0
    </NetCoreTargetFrameworks>

    <NetCoreAndroidTargetFrameworks
      Condition=" '$(NetCoreAndroidTargetFrameworks)' == '' And '$(SupportsAndroidTargeting)' == 'true' ">
      net8.0-android34.0;
      net9.0-android35.0
    </NetCoreAndroidTargetFrameworks>

    <NetCoreIOSTargetFrameworks
      Condition=" '$(NetCoreIOSTargetFrameworks)' == '' And '$(SupportsIOSTargeting)' == 'true' ">
      net8.0-ios18.0;
      net9.0-ios18.0
    </NetCoreIOSTargetFrameworks>

    <NetCoreMacCatalystTargetFrameworks
      Condition=" '$(NetCoreMacCatalystTargetFrameworks)' == '' And '$(SupportsMacCatalystTargeting)' == 'true' ">
      net8.0-maccatalyst18.0;
      net9.0-maccatalyst18.0
    </NetCoreMacCatalystTargetFrameworks>

    <NetCoreMacOSTargetFrameworks
      Condition=" '$(NetCoreMacOSTargetFrameworks)' == '' And '$(SupportsMacOSTargeting)' == 'true' ">
      net8.0-macos15.0;
      net9.0-macos15.0
    </NetCoreMacOSTargetFrameworks>

    <NetCoreWindowsTargetFrameworks
      Condition=" '$(NetCoreWindowsTargetFrameworks)' == '' And '$(SupportsWindowsTargeting)' == 'true' ">
      net8.0-windows7.0;
      net8.0-windows10.0.17763;
      net9.0-windows7.0;
      net9.0-windows10.0.17763
    </NetCoreWindowsTargetFrameworks>

    <NetStandardTargetFrameworks Condition=" '$(NetStandardTargetFrameworks)' == '' ">
      netstandard2.0;
      netstandard2.1
    </NetStandardTargetFrameworks>

    <UniversalWindowsPlatformTargetFrameworks
      Condition=" '$(UniversalWindowsPlatformTargetFrameworks)' == '' And '$(SupportsUniversalWindowsPlatformTargeting)' == 'true' ">
      uap10.0.17763
    </UniversalWindowsPlatformTargetFrameworks>
  </PropertyGroup>

  <PropertyGroup>
    <Authors>Kévin Chalet</Authors>
    <Company>$(Authors)</Company>
    <Product>OpenIddict</Product>
    <_ProjectCopyright>© Kévin Chalet. All rights reserved.</_ProjectCopyright>
    <PackageIconFullPath>$(MSBuildThisFileDirectory)package-icon.png</PackageIconFullPath>
    <PackageProjectUrl>https://openiddict.com/</PackageProjectUrl>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageTags>authentication;jwt;openidconnect;openiddict;security</PackageTags>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/openiddict/openiddict-core.git</RepositoryUrl>
  </PropertyGroup>

  <PropertyGroup>
    <RepoRelativeProjectDir>$([MSBuild]::MakeRelative($(RepoRoot), $(MSBuildProjectDirectory)))</RepoRelativeProjectDir>
    <WarnOnPackingNonPackableProject>false</WarnOnPackingNonPackableProject>
    <CheckEolTargetFramework>false</CheckEolTargetFramework>
    <AfterTargetFrameworkInferenceTargets>$(MSBuildThisFileDirectory)eng\AfterTargetFrameworkInference.targets</AfterTargetFrameworkInferenceTargets>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);AddTfmSpecificPlaceholders</TargetsForTfmSpecificContentInPackage>
    <WebApplicationsTargetPath>$(MSBuildThisFileDirectory)eng\msbuild\web\WebApplications\Microsoft.WebApplication.targets</WebApplicationsTargetPath>
  </PropertyGroup>

  <!--
    These are set per-project so versioning is applied correctly, but are not set globally otherwise
    the Arcade SDK will attempt to publish artifacts such as symbols to Microsoft's servers.
  -->
  <PropertyGroup Condition=" '$(GITHUB_ACTIONS)' == 'true' And '$(GITHUB_REF.StartsWith(`refs/pull/`))' == 'false' ">
    <OfficialBuild>true</OfficialBuild>
    <OfficialBuildId>$(_ComputedOfficialBuildId)</OfficialBuildId>
  </PropertyGroup>

  <PropertyGroup Condition=" $(RepoRelativeProjectDir.Contains('sandbox')) ">
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
    <IncludeSymbols>false</IncludeSymbols>
    <IsPackable>false</IsPackable>
    <IsShipping>false</IsShipping>
    <Serviceable>false</Serviceable>
    <SignAssembly>false</SignAssembly>
  </PropertyGroup>

  <PropertyGroup Condition=" $(RepoRelativeProjectDir.Contains('src')) ">
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <IncludeSymbols>true</IncludeSymbols>
    <IsPackable>true</IsPackable>
    <IsShipping>true</IsShipping>
    <Serviceable>false</Serviceable>
  </PropertyGroup>

  <PropertyGroup Condition=" $(RepoRelativeProjectDir.Contains('src')) Or $(RepoRelativeProjectDir.Contains('test')) ">
    <IncludeInternalExtensions Condition=" '$(IncludeInternalExtensions)' == '' ">true</IncludeInternalExtensions>
  </PropertyGroup>

  <PropertyGroup>
    <PolySharpIncludeRuntimeSupportedAttributes>true</PolySharpIncludeRuntimeSupportedAttributes>
  </PropertyGroup>

  <ItemGroup>
    <ProjectCapability Include="DynamicDependentFile" />
    <ProjectCapability Include="DynamicFileNesting" />
  </ItemGroup>

  <ItemGroup Condition=" '$(IncludeInternalExtensions)' == 'true' ">
    <Compile Include="$(MSBuildThisFileDirectory)shared\OpenIddict.Extensions\*.cs" Visible="false" />
  </ItemGroup>

</Project>
